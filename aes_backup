package cryptoutil

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io"
)

/**
 * AES加密 ，CBC模式，PCK5填充数据，base64加密
 */

// 填充数据
func PKCS5Padding(ciphertext []byte, blockSize int) []byte {
	padding := blockSize - len(ciphertext)%blockSize
	padtext := bytes.Repeat([]byte{byte(padding)}, padding)
	return append(ciphertext, padtext...)
}
func PKCS5UnPadding(origData []byte) []byte {
	length := len(origData)
	unpadding := int(origData[length-1])
	return origData[:(length - unpadding)]
}

// AES加密，CBC模式
func AesCBCEncrypt(origData, key []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		logger.Errorf("get aes cipher error: %s", err.Error())
		return nil, err
	}

	blockSize := block.BlockSize()
	origData = PKCS5Padding(origData, blockSize)
	cipherText := make([]byte, blockSize+len(origData))
	// 加解密向量
	iv := cipherText[:blockSize]
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		logger.Errorf("get aes iv error: %s", err.Error())
		return nil, err
	}
	iv = []byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6}
	fmt.Println("加密偏移量：", iv, string(iv))
	blockMode := cipher.NewCBCEncrypter(block, iv)
	blockMode.CryptBlocks(cipherText[blockSize:], origData)
	return cipherText, nil
}

// 解密
func AesCBCDecrypt(cipherText, key []byte) ([]byte, error) {
	block, err := aes.NewCipher(key)
	if err != nil {
		logger.Errorf("get aes cipher error: %s", err.Error())
		return nil, err
	}

	blockSize := block.BlockSize()
	origData := cipherText[blockSize:]
	if len(origData)%blockSize != 0 {
		logger.Error("ciphertext is not a multiple of the block size")
		return nil, err
	}
	// 获取向量
	iv := cipherText[:blockSize]
	fmt.Println("解密偏移量：", iv)
	blockMode := cipher.NewCBCDecrypter(block, iv)
	blockMode.CryptBlocks(origData, cipherText[blockSize:])
	origData = PKCS5UnPadding(origData)
	return origData, nil
}

func EncryptColumn(originDataString, encryptKeyString string) (string, error) {
	// string2[]byte
	originData := []byte(originDataString)
	encryptKey := []byte(encryptKeyString)
	// Aes加密
	res, err := AesCBCEncrypt(originData, encryptKey)
	if err != nil {
		logger.Errorf("aes encrypt error:%s", err.Error())
		return "", err
	}
	encodeString := base64.StdEncoding.EncodeToString(res)
	return encodeString, nil
}

func DecryptColumn(encryptData, encryptKeyString string) (string, error) {
	// string2[]byte
	encryptKey := []byte(encryptKeyString)
	// Aes解密
	decodeString, err := base64.StdEncoding.DecodeString(encryptData)
	if err != nil {
		logger.Errorf("base64解密失败:%s", err.Error())
		return "", err
	}
	originData, err := AesCBCDecrypt(decodeString, encryptKey)
	if err != nil {
		logger.Errorf("aes decrypt error:%s", err.Error())
		return "", err
	}
	return string(originData), nil
}
